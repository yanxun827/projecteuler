"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

# Using the fact that the number of times the prime factors of the number repeats,
# the number of divisors can be calculated. (Divisor function).

import collections


def find_number_of_divisors(dividend):
	prime_factors = []
	prime_number = 2

	while dividend > 1:
		if dividend % prime_number == 0:
			dividend //= prime_number
			prime_factors.append(prime_number)
		else:
			prime_number += 1

	counter = collections.Counter(prime_factors)
	repeating_primes_counts = counter.values()

	divisors_count = 1
	for n in repeating_primes_counts:
		divisors_count *= (n + 1)  # divisor function

	return divisors_count


def find_triangle_number(limit):
	triangle_num = 1
	addition = 2

	while True:
		triangle_num += addition
		number_of_divisors = find_number_of_divisors(triangle_num)

		if number_of_divisors > limit:
			break

		addition += 1

	return triangle_num


def main():
	limit = 500
	print(find_triangle_number(limit))


if __name__ == '__main__':
	main()

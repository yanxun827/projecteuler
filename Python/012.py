"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

# Using the fact that the number of times the prime factors of the number repeats,
# the number of divisors can be calculated.


def find_prime_factors(n):
	i = 2
	factors = []
	while i * i <= n:
		if n % i: # True means there is a remainder
			i += 1
		else:
			n //= i
			factors.append(i)
			
	if n > 1:
		factors.append(n)
		
	return factors


def num_with_divisors(limit):
	x = 1
	while True:
		triangle_num = (x * (x + 1)) // 2
		x += 1

		primes = list(reversed(find_prime_factors(triangle_num))) # sort primes from large to small
		timeslist = []

		for prime in primes:
			times = primes.count(prime)
			timeslist.append(times + 1)
			primes = [i for i in primes if i != prime]

		if timeslist == []: # Empty Set, for when triangle_num == 1
			timeslist = [1]

		divisors = 1
		for times in timeslist:
			divisors *= times

		if divisors > limit:
			return triangle_num


if __name__ == '__main__':
	limit = 500
	print(num_with_divisors(limit))